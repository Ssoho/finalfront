[{"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\index.js":"1","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\serviceWorker.js":"2","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\App.js":"3","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\login.component.js":"4","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\register.component.js":"5","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Top.js":"6","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-admin.component.js":"7","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-user.component.js":"8","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-moderator.component.js":"9","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Signrecommend.js":"10","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\home.component.js":"11","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\profile.component.js":"12","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\auth.service.js":"13","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\common\\EventBus.js":"14","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Recommend2.js":"15","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\user.service.js":"16","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Recommend1.js":"17","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\common\\with-router.js":"18","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\auth-header.js":"19","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Player.js":"20","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Songresult.js":"21","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Updateuser.js":"22","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\DCNresult.js":"23","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Melresult.js":"24","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Info.js":"25","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Searchresult.js":"26"},{"size":384,"mtime":1691386678989,"results":"27","hashOfConfig":"28"},{"size":5085,"mtime":1688952962000,"results":"29","hashOfConfig":"28"},{"size":3447,"mtime":1691389497634,"results":"30","hashOfConfig":"28"},{"size":4366,"mtime":1691463182162,"results":"31","hashOfConfig":"28"},{"size":6505,"mtime":1691463650760,"results":"32","hashOfConfig":"28"},{"size":4898,"mtime":1691393118936,"results":"33","hashOfConfig":"28"},{"size":1002,"mtime":1690353978214,"results":"34","hashOfConfig":"28"},{"size":1008,"mtime":1690437243752,"results":"35","hashOfConfig":"28"},{"size":1010,"mtime":1688952962000,"results":"36","hashOfConfig":"28"},{"size":3609,"mtime":1690943940392,"results":"37","hashOfConfig":"28"},{"size":1928,"mtime":1691374340014,"results":"38","hashOfConfig":"28"},{"size":4045,"mtime":1691463315109,"results":"39","hashOfConfig":"28"},{"size":730,"mtime":1690119966000,"results":"40","hashOfConfig":"28"},{"size":327,"mtime":1689728382000,"results":"41","hashOfConfig":"28"},{"size":16640,"mtime":1691376651780,"results":"42","hashOfConfig":"28"},{"size":522,"mtime":1690357305361,"results":"43","hashOfConfig":"28"},{"size":8307,"mtime":1690937661303,"results":"44","hashOfConfig":"28"},{"size":376,"mtime":1688952962000,"results":"45","hashOfConfig":"28"},{"size":453,"mtime":1689045044000,"results":"46","hashOfConfig":"28"},{"size":2009,"mtime":1690330813052,"results":"47","hashOfConfig":"28"},{"size":5214,"mtime":1691653363001,"results":"48","hashOfConfig":"28"},{"size":1623,"mtime":1690528864766,"results":"49","hashOfConfig":"28"},{"size":4957,"mtime":1691633391227,"results":"50","hashOfConfig":"28"},{"size":4700,"mtime":1691392376952,"results":"51","hashOfConfig":"28"},{"size":5230,"mtime":1690990951692,"results":"52","hashOfConfig":"28"},{"size":7255,"mtime":1691478846144,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"itkdj8",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"60"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"60"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\index.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\serviceWorker.js",[],[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\App.js",["149","150","151","152","153"],[],"import React, { useState, useEffect } from \"react\";\nimport { Routes, Route, Link, useLocation, Navigate, useNavigate } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Top from './components/Top';\nimport AuthService from \"./services/auth.service\";\n\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport Home from \"./components/home.component\";\nimport Profile from \"./components/profile.component\";\nimport BoardUser from \"./components/board-user.component\";\nimport BoardModerator from \"./components/board-moderator.component\";\nimport BoardAdmin from \"./components/board-admin.component\";\nimport { Nav } from 'react-bootstrap';\n\nimport EventBus from \"./common/EventBus\";\nimport Signrecommend from \"./components/Signrecommend\";\nimport Player from \"./components/Player\";\nimport Updateuser from \"./components/Updateuser\";\nimport Searchresult from \"./components/Searchresult\";\n\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState(undefined);\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\n  const location = useLocation();  \n  const [showTop, setShowTop] = useState(true);  \n  const [searchResults, setSearchResults] = useState({\n    resultdata1: [],\n    resultdata2: [],\n    resultdata3: []\n  });\n\n  const navigate = useNavigate();\n\n  const updateShowTop = (shouldShow) => {\n    setShowTop(shouldShow);\n  };  \n\n  useEffect(() => {\n    const user = AuthService.getCurrentUser();\n\n    if (user) {\n      setCurrentUser(user);\n      setShowModeratorBoard(user.roles.includes(\"ROLE_MODERATOR\"));\n      setShowAdminBoard(user.roles.includes(\"ROLE_ADMIN\"));\n    }\n\n    const logoutEvent = () => {\n      logOut();\n    };\n\n    EventBus.on(\"logout\", logoutEvent);\n\n    return () => {\n      EventBus.remove(\"logout\", logoutEvent);\n    };\n  }, []);\n\n  useEffect(() => {\n    const isHidden = [\"/login\", \"/register\", \"/signrecommend\"].includes(location.pathname);\n    setShowTop(!isHidden);\n  }, [location]);  \n\n  const logOut = () => {\n    AuthService.logout();\n    setShowModeratorBoard(false);\n    setShowAdminBoard(false);\n    setCurrentUser(undefined);\n\n    navigate('/home');\n  };\n\n  return (\n    <>\n    \n      {showTop && (\n        <Top setSearchResults={setSearchResults}\n          currentUser={currentUser}\n          showModeratorBoard={showModeratorBoard}\n          showAdminBoard={showAdminBoard}\n          logOut={logOut}\n        />\n      )}\n\n      <div className=\"container mt-3\">\n      <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/home\" element={<Home />} />\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/register\" element={<Register />} />\n            <Route path=\"/profile\" element={<Profile logOut = {logOut} />} />\n            <Route path=\"/user\" element={<BoardUser />} />\n            <Route path=\"/mod\" element={<BoardModerator />} />\n            <Route path=\"/admin\" element={<BoardAdmin />} />\n            <Route path=\"/signrecommend\" element={<Signrecommend />} />\n            <Route path=\"/player\" element={<Player />} />\n            <Route path=\"/updateuser\" element={<Updateuser />} />\n            <Route path=\"/searchresult\" element={<Searchresult searchResults={searchResults} />} />\n      </Routes>\n      </div>\n    </>\n  );\n}; \nexport default App;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\login.component.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\register.component.js",["154"],[],"import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\nimport { withRouter } from '../common/with-router';\n\nimport AuthService from \"../services/auth.service\";\n\n\n// 210번째 줄에 style={{ fontSize: '14px' }} 추가\n\nconst required = value => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\" style={{ fontSize: '14px' }}>\n        필수 입력란입니다!\n      </div>\n    );\n  }\n};\n\nconst email = value => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\" style={{ fontSize: '14px' }}>\n        유효한 이메일이 아닙니다.\n      </div>\n    );\n  }\n};\n\nconst vusername = value => {\n  if (value.length < 3 || value.length > 15) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\" style={{ fontSize: '14px' }}>\n        아이디는 3~15자 사이여야 합니다.\n      </div>\n    );\n  }\n};\n\nconst vpassword = value => {\n  if (value.length < 6 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\" style={{ fontSize: '14px' }}>\n        비밀번호는 6~20자 사이여야 합니다.\n      </div>\n    );\n  }\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successful: false,\n      message: \"\"\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  async handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      try {\n        await AuthService.register(\n          this.state.username,\n          this.state.email,\n          this.state.password\n        );\n\n         // 회원가입 성공 시에 로그인 처리를 위해 handleLogin 메서드 호출\n         await this.handleLogin(this.state.username, this.state.password);\n      } catch (error) {\n        const resMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage\n      });\n    }\n  }  \n}\n\nasync handleLogin(username, password) {\n  try {\n    const response = await AuthService.login(username, password);\n    this.props.router.navigate(\"/signrecommend\");\n    window.location.reload();\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    // 로그인 실패 시에 에러 처리\n    this.setState({\n      successful: false,\n      message: \"로그인에 실패했습니다.\"\n    });\n  }\n}\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className='signup-background'>\n          <img\n            src=\"watermelon_logo.jpg\"\n            alt=\"watermelon-img\"\n            style={{ display: 'block', margin: '50px auto', maxWidth: '70%', cursor : 'pointer' }}\n            onClick={() => {this.props.router.navigate('/home');}}\n          />\n          <h6 style={{ color: 'white', textAlign: 'left', marginLeft: '50px', marginBottom: '-40px'}}>회원가입</h6>\n\n          <Form\n            onSubmit={this.handleRegister}\n            ref={c => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n                <div className=\"col-form\">\n                  <label htmlFor=\"username\"></label>\n                  <Input\n                    type=\"text\"\n                    className=\"signin\"\n                    name=\"username\"\n                    placeholder=\"아이디\"\n                    value={this.state.username}\n                    onChange={this.onChangeUsername}\n                    validations={[required, vusername]}\n                  /> \n\n                  <label htmlFor=\"email\"></label>\n                  <Input\n                    type=\"text\"\n                    className=\"signin\"\n                    name=\"email\"\n                    placeholder=\"이메일\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n\n                  <label htmlFor=\"password\"></label>\n                  <Input\n                    type=\"password\"\n                    className=\"signin\"\n                    name=\"password\"\n                    placeholder=\"비밀번호\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"signup-btn\">회원가입</button>\n                </div>\n\n                <p style={{color: 'white', marginTop: '20px', fontSize: '14px'}}>로그인 화면으로 돌아가기<button className=\"signinbtn\" onClick={() => {\n                this.props.router.navigate('/login');}}>로그인</button></p>\n              </div>\n            )}\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                  style={{ fontSize: '14px' }}\n                  \n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={c => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Register);","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Top.js",["155"],[],"import React from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Nav } from 'react-bootstrap';\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Searchresult from \"./Searchresult\";\r\nimport \"./../App.css\";\r\n\r\nconst Top = ({ currentUser, showModeratorBoard, showAdminBoard, logOut, setSearchResults }) => {\r\n    const navigate = useNavigate();\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n      };\r\n\r\n    const handleSearchClick = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n        const encodedInputValue = encodeURIComponent(inputValue);\r\n        const response1 = await axios.get(`http://localhost:8080/api/search/song?keyword=${encodedInputValue}`);\r\n        const response2 = await axios.get(`http://localhost:8080/api/search/artist?keyword=${encodedInputValue}`);\r\n        const response3 = await axios.get(`http://localhost:8080/api/search/lyric?keyword=${encodedInputValue}`);\r\n        const resultdata1 = typeof response1.data === 'string' ? JSON.parse(response1.data) : response1.data;\r\n        const resultdata2 = typeof response1.data === 'string' ? JSON.parse(response2.data) : response2.data;\r\n        const resultdata3 = typeof response1.data === 'string' ? JSON.parse(response3.data) : response3.data;        \r\n\r\n        setSearchResults({\r\n            resultdata1: resultdata1,\r\n            resultdata2: resultdata2,\r\n            resultdata3: resultdata3\r\n          });\r\n    \r\n          navigate(\"/searchresult\");\r\n\r\n        }\r\n        catch(e){\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n  return (\r\n    <Nav style={{ marginBottom : '30px' }}>\r\n      <div className=\"navbar\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <form onSubmit={handleSearchClick} style={{ display: 'flex', alignItems: 'center' }}>\r\n            <Link to={\"/\"}>\r\n            <img src=\"watermelon_logo.jpg\" alt=\"Watermelon\" style={{ width: '250px', height: 'auto', margin: '10px', cursor : 'pointer' }}/>\r\n            </Link>\r\n            <div className='search-background' style={{ display: 'flex', alignItems: 'center' }}>\r\n            <button\r\n        className=\"btn btn-success\" type=\"submit\"\r\n        style={{\r\n        background: `url('search.png') no-repeat center`,\r\n        backgroundSize: 'cover',\r\n        width: '20px',\r\n        height: '20px',\r\n        margin: '10px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        border: 'none', // 테두리 제거\r\n        outline: 'none', // 클릭 시 포커스 테두리 제거    \r\n        justifyContent: 'center',\r\n        }}\r\n        \r\n        />\r\n        <input className=\"search-input\" type=\"text\" placeholder=\"검색어를 입력해주세요\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}        \r\n        />\r\n\r\n            {showModeratorBoard && (\r\n                <li className=\"nav-item\">\r\n                <Link to={\"/mod\"} className=\"nav-link\">\r\n                    Moderator Board\r\n                </Link>\r\n                </li>\r\n            )}\r\n\r\n            {showAdminBoard && (\r\n                <li className=\"nav-item\">\r\n                <Link to={\"/admin\"} className=\"nav-link\">\r\n                    Admin Board\r\n                </Link>\r\n                </li>\r\n            )}\r\n            </div>\r\n\r\n            {/* {currentUser && (\r\n                <li className='navbarMenu'>\r\n                <Link to={\"/profile\"}  style={{ color: \"white\" }} className=\"nav-link\">\r\n                    {currentUser.username}님의 마이페이지\r\n                </Link>\r\n                </li>\r\n            )} */}\r\n            \r\n\r\n            {currentUser ? (\r\n            <div>\r\n\r\n                <li className='navbarMenu' style={{ display: 'flex', flexDirection: 'row', marginRight: '10px' }}>\r\n                <Link to={\"/profile\"}  style={{ color: \"white\" }} className=\"nav-link\">\r\n                    {currentUser.username}님의 마이페이지\r\n                </Link>\r\n\r\n                <a href=\"/\" style={{ color: \"white\" }} className=\"nav-link\" onClick={logOut}>\r\n                    로그아웃\r\n                </a>\r\n                </li>\r\n            </div>\r\n            ) : (\r\n            <div>\r\n                <li className='navbarMenu' style={{ display: 'flex', flexDirection: 'row', marginRight: '10px' }}>\r\n                <Link to={\"/login\"} style={{ color: \"white\" }} className=\"nav-link\">\r\n                    로그인\r\n                </Link>\r\n\r\n                <Link to={\"/register\"} style={{ color: \"white\" }} className=\"nav-link\">\r\n                    회원가입\r\n                </Link>\r\n                </li>\r\n            </div>\r\n            )}\r\n            </form>\r\n\r\n        {/* <AuthVerify logOut={this.logOut}/> */}\r\n        </div>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Top;\r\n",[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-admin.component.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-user.component.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\board-moderator.component.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Signrecommend.js",["156","157","158","159"],[],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Recommend1 from './Recommend1';\r\nimport Recommend2 from './Recommend2';\r\n\r\n\r\nfunction Signrecommend(props){\r\n    const navigate = useNavigate();\r\n    const [showAlert, setShowAlert] = useState(false); // 경고창 노출 여부 상태 추가  \r\n    const closeAlert = () => {\r\n        setShowAlert(false); // 경고창 닫기\r\n      };\r\n    const [reco, setReco] = useState([]);\r\n\r\n    // const [selectedItems, setSelectedItems] = useState(new Set());\r\n    // const selectedItemsArray = Array.from(selectedItems);\r\n\r\n    const [selectedSongs, setSelectedSongs] = useState(new Set());\r\n    const selectedSongsArray = Array.from(selectedSongs);\r\n\r\n    const [selectedIds, setSelectedIds] = useState(new Set());    \r\n    const selectedIdsArray = Array.from(selectedIds);\r\n\r\n    const axiosConfig = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    // const handleSelectedItemsChange = (items) => {\r\n    //   setSelectedItems(new Set(items));\r\n    // };    \r\n\r\n    const handleSelectedSongsChange = (songs) => {\r\n      setSelectedSongs(new Set(songs));\r\n    };\r\n\r\n    const handleSelectedIdsChange = (ids) => {\r\n      setSelectedIds(new Set(ids));\r\n    };\r\n\r\n    const handleRecommendSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // 선택한 장르와 노래 목록을 서버로 전송\r\n        // const tags = {\r\n        //   tag: JSON.stringify(selectedItemsArray),\r\n        // };\r\n\r\n        const songs = {\r\n          song_ids : JSON.stringify(selectedIdsArray),\r\n        };\r\n\r\n        const userId = JSON.parse(localStorage.getItem('user')).id;\r\n        \r\n        \r\n        try{\r\n          // 2023-08-01\r\n          // await 뺏음\r\n          // 왜 why? axios는 기본적으로 비동기형 통신장치라 await을 불필요하게 쓰면\r\n          // 비동기형 통신장치의 이점을 살리지 못 함.\r\n          // axios.put(`http://localhost:8080/api/tag/post/${userId}`, tags, axiosConfig);\r\n          await axios.put(`http://localhost:8080/api/newsong/post/${userId}`, songs, axiosConfig);\r\n          // console.log(songs)\r\n          // console.log(tags)\r\n          navigate('/');\r\n          // const response = await axios.put(`http://localhost:8080/api/annoy/recommend-songs/${userId}`);\r\n          // setReco(response.data);\r\n          // console.log(response.data);\r\n          // navigate(\"/path/to/Tagresult\", { state: { reco: response.data } });\r\n\r\n        } catch (error) {\r\n        console.log(error);\r\n        setShowAlert(true); // 경고창 노출 상태 변경\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\nreturn <>\r\n<div>\r\n\r\n{/* <img src=\"watermelon_logo.jpg\" alt=\"Watermelon\" style={{ width: '250px', height: 'auto', marginLeft: '394px', marginTop : '25px'}} />     */}\r\n\r\n{/* <Recommend1 setSelectedItems={handleSelectedItemsChange} /> */}\r\n\r\n<Recommend2 setSelectedSongs={handleSelectedSongsChange} setSelectedIds={handleSelectedIdsChange} />\r\n\r\n<div style={{ display: 'flex', justifyContent: 'center', marginTop : '40px' }}>\r\n<button className = 'submit-btn' onClick={handleRecommendSubmit}>선택 완료</button>\r\n</div>\r\n\r\n</div>\r\n\r\n{showAlert && (\r\n        <div className=\"recommend-alert\">\r\n          <div className=\"recommend-alert-modal\">\r\n            <p style={{marginBottom : '20px'}}>예상치 못한 오류가 발생하였습니다.</p>\r\n            <button onClick={closeAlert}>닫기</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n</>\r\n}\r\n\r\nexport default Signrecommend;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\home.component.js",["160"],[],"import React, { useState, useEffect } from \"react\";\nimport {Nav} from 'react-bootstrap';\nimport UserService from \"../services/user.service\";\nimport Melresult from './Melresult';\nimport DCNresult from './DCNresult';\nimport Songresult from \"./Songresult\";\nimport Info from \"./Info\";\nimport \"./home.css\";\n\nconst Home = () => {\n  const [content, setContent] = useState(\"\");\n  const [tab, setTab] = useState(0);\n\n  const userId = JSON.parse(localStorage.getItem('user'))?.id;\n\n  useEffect(() => {\n    UserService.getPublicContent().then(\n      (response) => {\n        setContent(response.data);\n      },\n      (error) => {\n        setContent(\n          (error.response && error.response.data) ||\n            error.message ||\n            error.toString()\n        );\n      }\n    );\n  }, []);\n\n  return (\n    <div>\n    \n      {userId ?  (    \n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n    <div className = \"navbar1\" style={{ display: 'flex', justifyContent: 'center' }}>\n    <Nav className = \"nav-tab1\" variant=\"tabs\" defaultActiveKey=\"link0\">\n    <Nav.Item>\n      <Nav.Link onClick={() => { setTab(0) }} eventKey=\"link1\" className={tab === 0 ? \"nav-link1 active\" : \"nav-link1\"} >노래가사로 추천</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link onClick={() => { setTab(1) }} eventKey=\"link2\"className={tab === 1 ? \"nav-link1 active\" : \"nav-link1\"} >노래파형으로 추천</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link onClick={() => { setTab(2) }} eventKey=\"link3\" className={tab === 2 ? \"nav-link1 active\" : \"nav-link1\"} >사이트 이용패턴으로 추천</Nav.Link>\n    </Nav.Item>\n  </Nav>\n  </div>\n  </div>\n        ):(\n          <Info />\n      )}\n\n      {userId && tab === 0 && <Songresult userId={userId} />}\n      {userId && tab === 1 && <Melresult userId={userId} />}\n      {userId && tab === 2 && <DCNresult userId={userId} />}\n\n\n\n\n\n    </div>\n  );\n};\n\nexport default Home;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\profile.component.js",["161","162"],[],"import React, { useEffect, useState } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\nimport axios from 'axios';\n\nfunction Profile({ logOut }) {\n  const navigate = useNavigate();\n  const [userReady, setUserReady] = useState(false);\n  const [currentUser, setCurrentUser] = useState({ username: \"\" });\n\n  useEffect(() => {\n    const currentUser = AuthService.getCurrentUser();\n\n    if (!currentUser) {\n      navigate(\"/home\");\n    } else {\n      setCurrentUser(currentUser);\n      setUserReady(true);\n    }\n  }, [navigate]);\n\n  const axiosConfig = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const id = userReady ? JSON.parse(localStorage.getItem('user')).id : null;\n\n  const handleDeleteClick = () => {\n    if (id) {\n      axios.delete(`http://localhost:8080/api/user/delete/${id}`, axiosConfig)\n        .then((response) => {\n          AuthService.logout();\n          setCurrentUser(undefined);          \n          console.log(response);\n          console.log(\"User information has been successfully deleted.\");\n          logOut();\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.error(\"An error occurred while deleting user information.\", error);\n        });\n    }\n  };  \n\n  const handleUpdateClick = () => {\n    // 예제로 회원정보 변경 페이지로 이동하도록 설정\n    // setRedirect(\"/\"); \n  };\n\n  // if (redirect) {\n  //   return <Navigate to={redirect} />;\n  // }\n\n  if (!userReady) {\n    // Render a loading state while waiting for the user data to be ready\n    return <div>Loading...</div>;\n  }\n  \n  // If there's no current user, we have already navigated to /home in useEffect.\n  // So we don't need to render anything else here.\n  if (!currentUser) {\n    return null;\n  }  \n\n  return (\n    <div className=\"container\" style={{ margin: \"20px\", width: \"100%\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      {userReady ? (\n        <div>\n          <header className=\"jumbotron\">\n            <div style={{ border: \"1px solid #ccc\", borderRadius: \"10px\", padding: \"40px\", width: \"600px\" }}>\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <div>\n                  <img\n                    src={currentUser.profileImage || \"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"}\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                  />\n                </div>\n                <div>\n                  <h4>{currentUser.username}님 환영합니다!</h4>\n                  <p style={{ marginLeft : \"10px\", color: \"gray\" }}>{\" \"}\n                    {currentUser.email}</p>\n                  <div style={{ display: \"flex\", gap: \"10px\" }}>\n                    {/* <button className=\"btn btn-profileg\" onClick={handleUpdateClick}>\n                      회원정보 변경\n                    </button> */}\n                    <button className=\"btn btn-profiler\" onClick={handleDeleteClick}>회원정보 탈퇴</button>\n                  </div>\n                </div>\n              </div>\n              <div style={{ margin: \"10px 0\" }}>\n                <hr style={{ border: \"1px solid #ccc\", width: \"100%\" }} />\n              </div>\n              <div>\n                <p>회원님은<strong> 일반</strong> 유저입니다.</p>\n              </div>\n            </div>\n          </header>\n          {/* <p>\n            <strong>Token:</strong>{\" \"}\n            {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n            {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n          </p>\n          <p>\n            <strong>Id:</strong>{\" \"}\n            {currentUser.id}\n          </p>\n          <strong>Authorities:</strong>\n          <ul>\n            {currentUser.roles &&\n              currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n          </ul> */}\n        </div>\n      ) : null}\n    </div>\n    </div>\n  );\n}\n\nexport default Profile;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\auth.service.js",["163"],[],"import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios\n      .post(API_URL + \"signin\", {\n        username,\n        password\n      })\n      .then(response => {\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(username, email, password) {\n    return axios.post(API_URL + \"signup\", {\n      username,\n      email,\n      password\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));;\n  }\n}\n\nexport default new AuthService();","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\common\\EventBus.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Recommend2.js",["164","165"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\nfunction Recommend2(props){\r\n    // const navigate = useNavigate(); \r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [isHovering, setIsHovering] = useState(false); // 마우스 커서 상태    \r\n    const [selectedSongs, setSelectedSongs] = useState(new Set()); // 선택된 아이템 집합\r\n    const [filteredData, setFilteredData] = useState([]); // 초기에 랜덤으로 20개의 아이템 선택    \r\n    const [selectedIds, setSelectedIds] = useState(new Set());\r\n    const userName = JSON.parse(localStorage.getItem('user')).username;\r\n\r\n\r\n\r\n    const fetchSongs = async() => {\r\n        try {\r\n            setData(null);\r\n            const response = await axios.get('http://localhost:8080/api/newsong');\r\n            setData(response.data); \r\n            setLoading(false);\r\n        } catch (e) {\r\n            setError(e);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n      fetchSongs();\r\n  }, []);    \r\n\r\n\r\n    useEffect(() => {\r\n        setFilteredData(getRandomSongs(data, 10));\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n      props.setSelectedSongs(selectedSongs);\r\n    }, [selectedSongs]);        \r\n\r\n    useEffect(() => {\r\n      props.setSelectedIds(selectedIds);\r\n    }, [selectedIds]);           \r\n\r\n    if (loading) return <div>로딩중..</div>;\r\n    if (error) return <div>에러가 발생했습니다.</div>;\r\n    if (!data) return null;\r\n\r\n    const handleRandomize = () => {\r\n      setFilteredData(getRandomSongs(data, 10)); // 새로운 랜덤 아이템으로 filteredData 업데이트\r\n    };\r\n\r\n    function getRandomSongs(arr, count) { \r\n        if (!arr || arr.length === 0) {\r\n            return [];\r\n        }\r\n      const shuffled = arr.sort(() => 0.5 - Math.random()); // 배열을 랜덤하게 섞기\r\n      return shuffled.slice(0, count); // 지정된 개수만큼의 아이템 선택\r\n    } \r\n\r\n    const handleRemoveSongClick = (song) => {\r\n      setSelectedSongs((prevSongs) => {\r\n        const newSongs = new Set(prevSongs);\r\n        newSongs.delete(song);\r\n        return newSongs;\r\n      });\r\n    };        \r\n\r\n    const handleSongClick = (song) => {\r\n      setSelectedSongs((prevSongs) => {\r\n        const newSongs = new Set(prevSongs); // 이전 선택된 아이템 집합 복사\r\n  \r\n        if (newSongs.has(song)) {\r\n          newSongs.delete(song); // 이미 선택된 아이템이면 선택 해제\r\n        } else {\r\n          if (newSongs.size >= 5) {\r\n            return newSongs;\r\n          }\r\n          newSongs.add(song);\r\n        }\r\n  \r\n        return newSongs;\r\n      });\r\n    };\r\n\r\n    const handleRemoveIdClick = (song) => {\r\n      setSelectedIds((prevIds) => {\r\n        const newIds = new Set(prevIds);\r\n        newIds.delete(song);\r\n        return newIds;\r\n      });\r\n    };        \r\n\r\n    const handleIdClick = (song) => {\r\n      setSelectedIds((prevIds) => {\r\n        const newIds = new Set(prevIds); // 이전 선택된 아이템 집합 복사\r\n  \r\n        if (newIds.has(song)) {\r\n          newIds.delete(song); // 이미 선택된 아이템이면 선택 해제\r\n        } else {\r\n          if (newIds.size >= 5) {\r\n            return newIds;\r\n          }\r\n          newIds.add(song);\r\n        }\r\n  \r\n        return newIds;\r\n      });\r\n    };        \r\n\r\n\r\n\r\n\r\n    // const [filteredData, setFilteredData] = useState(() => getRandomSongs(data, 10)); // 초기에 랜덤으로 20개의 아이템 선택         \r\n\r\n      return <>\r\n\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <table className = 'recommend2-container' >\r\n          <tbody>\r\n          <tr>\r\n                  <td colSpan=\"1\" style={{ textAlign: 'left' }}>\r\n                    <p style = {{ fontSize : '24px', textAlign: 'left', marginBottom : '1px'}}>{userName}님,</p>\r\n                    <p style = {{ fontSize : '24px', textAlign: 'left', marginTop : '1px' }}>좋아하는 노래 5곡을 선택해 주세요!</p>\r\n                  </td>\r\n\r\n                  <td>\r\n                  <button className = 'refresh-btn2' onClick={handleRandomize}>다른 노래 보기</button>\r\n                  </td>\r\n                  \r\n            </tr>    \r\n            <tr style={{ fontSize : '16px', textAlign: 'left' }}>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[0]?.songName); handleIdClick(filteredData[0]?.id);} }  alt = \"song\" src={filteredData[0]?.url} width=\"50\" height=\"50\"/>                         \r\n                <div style = {{ marginLeft : '10px' }}>\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[0]?.songName); handleIdClick(filteredData[0]?.id);}}>\r\n                    {filteredData[0]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[0]?.songName); handleIdClick(filteredData[0]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[0]?.artistName}</p>                  \r\n                </div>\r\n                </div>                \r\n              </td>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                  <img className='pointer' onClick={() => {handleSongClick(filteredData[1]?.songName); handleIdClick(filteredData[1]?.id);}} alt = \"song\" src={filteredData[1]?.url} width=\"50\" height=\"50\"/>                  \r\n                  <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[1]?.songName); handleIdClick(filteredData[1]?.id);}}>\r\n                    {filteredData[1]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[1]?.songName); handleIdClick(filteredData[1]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[1]?.artistName}</p>\r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n              </tr>\r\n              <tr>\r\n              <td className=\"td400\">\r\n              <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[2]?.songName); handleIdClick(filteredData[2]?.id);}} alt = \"song\" src={filteredData[2]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[2]?.songName); handleIdClick(filteredData[2]?.id);}}>\r\n                    {filteredData[2]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[2]?.songName); handleIdClick(filteredData[2]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[2]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[3]?.songName); handleIdClick(filteredData[3]?.id);}} alt = \"song\" src={filteredData[3]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[3]?.songName); handleIdClick(filteredData[3]?.id);}}>\r\n                    {filteredData[3]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[3]?.songName); handleIdClick(filteredData[3]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[3]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n            </tr>\r\n            <tr style={{ fontSize : '16px', textAlign: 'left' }}>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}}>\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[4]?.songName); handleIdClick(filteredData[4]?.id);}} alt = \"song\" src={filteredData[4]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[4]?.songName); handleIdClick(filteredData[4]?.id);}}>\r\n                    {filteredData[4]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[4]?.songName); handleIdClick(filteredData[4]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[4]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[5]?.songName); handleIdClick(filteredData[5]?.id);}} alt = \"song\" src={filteredData[5]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[5]?.songName); handleIdClick(filteredData[5]?.id);}}>\r\n                    {filteredData[5]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[5]?.songName); handleIdClick(filteredData[5]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[5]?.artistName}</p>                                    \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n              </tr>\r\n              <tr>\r\n              <td className=\"td400\">\r\n              <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[6]?.songName); handleIdClick(filteredData[6]?.id);}} alt = \"song\" src={filteredData[6]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[6]?.songName); handleIdClick(filteredData[6]?.id);}}>\r\n                    {filteredData[6]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[6]?.songName); handleIdClick(filteredData[6]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[6]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[7]?.songName); handleIdClick(filteredData[7]?.id);}} alt = \"song\" src={filteredData[7]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[7]?.songName); handleIdClick(filteredData[7]?.id);}}>\r\n                    {filteredData[7]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[7]?.songName); handleIdClick(filteredData[7]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[7]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n            </tr>\r\n            <tr style={{ fontSize : '16px', textAlign: 'left' }}>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}}>\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[8]?.songName); handleIdClick(filteredData[8]?.id);}} alt = \"song\" src={filteredData[8]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[8]?.songName); handleIdClick(filteredData[8]?.id);}}>\r\n                    {filteredData[8]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[8]?.songName); handleIdClick(filteredData[8]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[8]?.artistName}</p>                  \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"td400\">\r\n                <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img className='pointer' onClick={() => {handleSongClick(filteredData[9]?.songName); handleIdClick(filteredData[9]?.id);}} alt = \"song\" src={filteredData[9]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span className='pointer' onClick={() => {handleSongClick(filteredData[9]?.songName); handleIdClick(filteredData[9]?.id);}}>\r\n                    {filteredData[9]?.songName}\r\n                  </span>\r\n                  <p className='pointer' onClick={() => {handleSongClick(filteredData[9]?.songName); handleIdClick(filteredData[9]?.id);}} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[9]?.artistName}</p>                                    \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n              </tr>                                      \r\n              {/* <tr>\r\n              <td className=\"td400\">\r\n              <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img onClick={() => handleSongClick(filteredData[6]?.song_name)} src={filteredData[6]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span onClick={() => handleSongClick(filteredData[6]?.song_name)}>\r\n                    {filteredData[6]?.song_name}\r\n                  </span>\r\n                  <p onClick={() => handleSongClick(filteredData[6]?.song_name)} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[6]?.artist_name}</p>                                                      \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"td400\">\r\n              <div style={{display : 'flex', flexDirection: 'row'}} >\r\n                <img onClick={() => handleSongClick(filteredData[7]?.song_name)} src={filteredData[7]?.url} width=\"50\" height=\"50\"/>\r\n                <div style = {{ marginLeft : '10px' }} >\r\n                  <span onClick={() => handleSongClick(filteredData[7]?.song_name)}>\r\n                    {filteredData[7]?.song_name}\r\n                  </span>\r\n                  <p onClick={() => handleSongClick(filteredData[7]?.song_name)} style={{ fontSize: '10px', textAlign: 'left' }} >{filteredData[7]?.artist_name}</p>                                                      \r\n                </div>\r\n                </div>\r\n              </td>\r\n              <td></td><td></td>\r\n            </tr> */}\r\n            <tr>\r\n            <td colSpan=\"4\" style={{ textAlign: 'left'}}>\r\n                  <p style={{ fontSize: '16px', textAlign: 'left' }}> \r\n                  {Array.from(selectedSongs).map((song, index) => (\r\n                      <span className=\"selected-item2\" key={index}\r\n                      onMouseEnter={() => setIsHovering(true)}\r\n                      onMouseLeave={() => setIsHovering(false)}\r\n                      onClick={() => {handleRemoveSongClick(song); handleRemoveIdClick(song); }}                      \r\n                      >{song} {isHovering && (\r\n                        <span className=\"remove-icon\" onClick={() => { handleRemoveSongClick(song); handleRemoveIdClick(song); }}></span>\r\n                      )}</span>\r\n              ))}</p>                \r\n                  </td>            \r\n            </tr>                  \r\n          </tbody>\r\n        </table>\r\n      </div>      \r\n      \r\n      </>      \r\n\r\n}\r\n\r\nexport default Recommend2;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\user.service.js",["166"],[],"import axios from 'axios';\nimport authHeader from './auth-header';\n\nconst API_URL = 'http://localhost:8080/api/test/';\n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + 'all');\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + 'user', { headers: authHeader() });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + 'mod', { headers: authHeader() });\n  }\n\n  getAdminBoard() {\n    return axios.get(API_URL + 'admin', { headers: authHeader() });\n  }\n}\n\nexport default new UserService();\n","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Recommend1.js",["167"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\nfunction Recommend1(props){\r\n    // const navigate = useNavigate();\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [isHovering, setIsHovering] = useState(false); // 마우스 커서 상태\r\n    const [selectedItems, setSelectedItems] = useState(new Set());\r\n    // const [selectedItems, setSelectedItems] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]); // 초기에 랜덤으로 n개의 아이템 선택\r\n    const userName = JSON.parse(localStorage.getItem('user')).username;\r\n\r\n    const fetchTags = async () => {\r\n        try {\r\n            setData(null);\r\n            const response = await axios.get('http://localhost:8080/api/tag');\r\n            setData(response.data);\r\n            setLoading(false);\r\n        } catch (e) {\r\n            setError(e);\r\n            setLoading(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchTags();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setFilteredData(getRandomItems(data, 8));\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n      props.setSelectedItems(selectedItems);\r\n    }, [selectedItems]);    \r\n\r\n    if (loading) return <div>로딩중..</div>;\r\n    if (error) return <div>에러가 발생했습니다.</div>;\r\n    if (!data) return null;    \r\n\r\n    const handleRandomize = () => {\r\n      setFilteredData(getRandomItems(data, 8)); // 새로운 랜덤 아이템으로 filteredData 업데이트\r\n    };\r\n\r\n    function getRandomItems(arr, count) {\r\n        if (!arr || arr.length === 0) {\r\n            return [];\r\n        }\r\n      const shuffled = arr.sort(() => 0.5 - Math.random()); // 배열을 랜덤하게 섞기\r\n      return shuffled.slice(0, count); // 지정된 개수만큼의 아이템 선택\r\n    };\r\n\r\n    const handleRemoveItemClick = (item) => {\r\n      setSelectedItems((prevItems) => {\r\n        const newItems = new Set(prevItems);\r\n        newItems.delete(item);\r\n        return newItems;\r\n      });\r\n    };\r\n\r\n    // const handleItemClick = (item) => {\r\n    //   setSelectedItems((prevItems) => {\r\n    //     if (prevItems.includes(item)) {\r\n    //       return prevItems.filter((prevItem) => prevItem !== item);\r\n    //     } else {\r\n    //       if (prevItems.length >= 5) {\r\n    //         return prevItems;\r\n    //       }\r\n    //       return [...prevItems, item];\r\n    //     }\r\n    //   });\r\n    // };    \r\n\r\n    function calculateFontSize(songName) {\r\n      return songName.length > 7 ? \"12px\" : \"15px\";\r\n    }    \r\n\r\n    const handleItemClick = (item) => {\r\n      setSelectedItems((prevItems) => {\r\n        const newItems = new Set(prevItems);\r\n  \r\n        if (newItems.has(item)) {\r\n          newItems.delete(item);\r\n        } else {\r\n          if (newItems.size >= 5) {\r\n            return newItems;\r\n          }\r\n          newItems.add(item);\r\n        }\r\n  \r\n        return newItems;\r\n      });\r\n    };    \r\n\r\n      return <>\r\n      \r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <table className = 'recommend1-container' >\r\n          <tbody >\r\n          <tr>\r\n                  <td colSpan=\"2\" style={{ textAlign: 'left' }}>\r\n                  <p style = {{ fontSize : '24px', textAlign: 'left', marginBottom : '1px'}}>{userName}님,</p>\r\n                    <p style = {{ fontSize : '24px', textAlign: 'left', marginTop : '1px' }}>좋아하는 태그 5개를 선택해 주세요!</p>                    \r\n                  </td>\r\n\r\n                  <td>\r\n                  <button className = 'refresh-btn1' onClick={handleRandomize}>다른 장르 보기</button>\r\n                  </td>\r\n            </tr>    \r\n            <tr style={{   textAlign: \"left\"  }}>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[0] && (                  \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[0]?.songName) }} onClick={() => handleItemClick(filteredData[0]?.songName)}>\r\n                    {filteredData[0]?.songName}\r\n                  </span>\r\n                )}                  \r\n                </div>\r\n              </td>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[1] && (                       \r\n                  <span className='select-item1'style={{ fontSize: calculateFontSize(filteredData[1]?.songName) }}  onClick={() => handleItemClick(filteredData[1]?.songName)}>\r\n                    {filteredData[1]?.songName}\r\n                  </span>\r\n                )}                      \r\n                </div>\r\n              </td>\r\n              <td className=\"td200\"> \r\n                <div>\r\n                {filteredData[2] && (      \r\n                  <span className='select-item1'style={{ fontSize: calculateFontSize(filteredData[2]?.songName) }}  onClick={() => handleItemClick(filteredData[2]?.songName)}>\r\n                    {filteredData[2]?.songName}\r\n                  </span>\r\n                )}\r\n                </div>\r\n              </td>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[3] && (      \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[3]?.songName) }} onClick={() => handleItemClick(filteredData[3]?.songName)}>\r\n                    {filteredData[3]?.songName}\r\n                  </span>\r\n                )}\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            <tr style={{ fontSize : '16px', textAlign: 'left' }}>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[4] && (                     \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[4]?.songName) }} onClick={() => handleItemClick(filteredData[4]?.songName)}>\r\n                    {filteredData[4]?.songName}\r\n                  </span>\r\n                )}                  \r\n                </div>\r\n              </td>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[5] && (       \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[5]?.songName) }} onClick={() => handleItemClick(filteredData[5]?.songName)}>\r\n                    {filteredData[5]?.songName}\r\n                  </span>\r\n                )}\r\n                </div>\r\n              </td>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[6] && (       \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[6]?.songName) }} onClick={() => handleItemClick(filteredData[6]?.songName)}>\r\n                    {filteredData[6]?.songName}\r\n                  </span>\r\n                )}\r\n                </div>\r\n              </td>\r\n              <td className=\"td200\">\r\n                <div>\r\n                {filteredData[7] && (       \r\n                  <span className='select-item1' style={{ fontSize: calculateFontSize(filteredData[7]?.songName) }} onClick={() => handleItemClick(filteredData[7]?.songName)}>\r\n                    {filteredData[7]?.songName}\r\n                  </span>\r\n                )}\r\n                </div>\r\n              </td>\r\n            </tr>    \r\n            <tr>\r\n          <td colSpan=\"4\" style={{ textAlign: 'left' }}>\r\n            <p style={{ fontSize: '16px', textAlign: 'left' }}>\r\n               {Array.from(selectedItems).map((item, index) => (\r\n                <span className=\"selected-item1\" key={index}\r\n                onMouseEnter={() => setIsHovering(true)}\r\n                onMouseLeave={() => setIsHovering(false)}\r\n                onClick={() => handleRemoveItemClick(item)}\r\n                >{item} {isHovering && (\r\n                  <span className=\"remove-icon\" onClick={() => handleRemoveItemClick(item)}></span>\r\n                )}</span>\r\n              ))}\r\n            </p>                   \r\n          </td>\r\n          </tr>               \r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      </>\r\n\r\n}\r\n\r\nexport default Recommend1;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\common\\with-router.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\services\\auth-header.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Player.js",[],[],"C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Songresult.js",["168","169","170","171","172"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport './home.css';\r\nimport loading from '../common/loading.gif';\r\n\r\nfunction Songresult(props){\r\n    const navigate = useNavigate();\r\n\r\n    const [reco, setReco] = useState([]);\r\n    // const [data, setData] = useState([]);\r\n    const [SelectedSongs, setSelectedSongs] = useState([]);\r\n    const [SelectedIds, setSelectedIds] = useState([]);\r\n    const [selectedLyrics, setSelectedLyrics] = useState(null);\r\n    const [selectedTitle, setSelectedTitle] = useState(null);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);    \r\n\r\n\r\n    const userId = props.userId;\r\n\r\n    // const userId = JSON.parse(localStorage.getItem('user'))?.id;\r\n\r\n    const getResult = async() => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8080/api/annoy/recommend-songs/${userId}`);\r\n            // setReco(response.data);\r\n            // console.log(response.data)\r\n            const data = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\r\n            setReco(data);\r\n            // console.log(data);\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        getResult();\r\n      }, []);\r\n\r\n\r\n      const handleSongClick = (song) => {\r\n        setSelectedSongs((prevSongs) => {\r\n          const newSongs = new Set(prevSongs); // 이전 선택된 아이템 집합 복사\r\n            newSongs.add(song);\r\n          return newSongs;\r\n        });\r\n      };  \r\n\r\n      const handleIdClick = (song) => {\r\n        setSelectedIds((prevIds) => {\r\n          const newIds = new Set(prevIds);\r\n            newIds.add(song);\r\n          return newIds;\r\n        });\r\n      };\r\n\r\n      const handleLyricClick = (index) => {\r\n        setSelectedLyrics(reco[index].lyric_Str);\r\n        setSelectedTitle(reco[index].songName);\r\n        setIsModalVisible(true);\r\n      };      \r\n\r\n      const closeModal = () => {\r\n        setIsModalVisible(false);\r\n      };      \r\n    \r\n\r\n  \r\n    return (\r\n      \r\n        <div className=\"cent\" style={{ margin: \"20px\", width: \"100%\" }}>\r\n        \r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <table className=\"td800\">\r\n            <tbody>\r\n              <tr>\r\n                <td colSpan=\"4\" style={{ textAlign: \"left\" }}>\r\n                  <p style={{ textAlign: \"left\" , fontSize : '18px'}} >\r\n                    Annoy모델을 기반으로 추천드립니다\r\n                  </p>\r\n                  <p style={{fontSize : '14px'}}>\r\n                  노래 가사의 단어들을 이용해 빈도수를 확인하고 '많이 등장하는 단어'가 유사한 노래를 추천해 드립니다.\r\n                  </p>\r\n\r\n                  {/* 노래 가사를 이용한 tfidf 벡터의 코사인 유사도를 계산하는 annoy 모델을 활용하여 노래를 추천합니다. */}\r\n                </td>\r\n              </tr>\r\n              {reco.length > 0 ? (\r\n              reco.map((song, index) => (\r\n                <tr key={index} style={{ fontSize: \"16px\", textAlign: \"left\" }}>\r\n                  <td className=\"td400\">\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                      <img\r\n                        onClick={() => handleSongClick(song.songName)}\r\n                        alt=\"song\"\r\n                        src={song.url}\r\n                        width=\"50\"\r\n                        height=\"50\"\r\n                      />\r\n                      <div style={{ marginLeft: \"10px\" }}>\r\n                        <span onClick={() => handleSongClick(song.songName)}>\r\n                          {song.songName}\r\n                        </span>\r\n                        <p\r\n                          onClick={() => handleSongClick(song.songName)}\r\n                          style={{ fontSize: \"10px\", textAlign: \"left\" }}\r\n                        >\r\n                          {song.artistName}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                  <div style={{ marginLeft : \"100px\", display: \"flex\", flexDirection: \"row\" }}>\r\n                    <button className = 'lyric-btn' onClick={() => handleLyricClick(index)} >\r\n                    가사보기\r\n                    </button>\r\n                  </div>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                  <img style ={{ paddingLeft : '300px' }} src = {loading} alt =\"loading\" />\r\n              </tr>\r\n            )}              \r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {isModalVisible && selectedLyrics !== null && (\r\n        <div className=\"lyric_modal\">\r\n          <div className=\"title_container\">\r\n            <h4>{selectedTitle}</h4>\r\n          </div>\r\n          <div className=\"lyric_content\" dangerouslySetInnerHTML={{ __html: selectedLyrics }} />\r\n          <button onClick={closeModal}>닫기</button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n    );\r\n  };\r\n  \r\n  export default Songresult;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Updateuser.js",["173"],[],"import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // 서버와의 HTTP 통신을 위해 axios 사용\r\n\r\nfunction UpdateUser({ currentUser, closeModal }) {\r\n     // 사용자 정보 변경을 위한 상태 변수들\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [profileImage, setProfileImage] = useState(null);\r\n    \r\n// 사용자 정보 변경 함수\r\n  const updateUser = () => {\r\n    // 변경된 정보를 담는 객체 생성\r\n    const updatedInfo = {\r\n      password: password,\r\n      email: email,\r\n      profileImage: profileImage,\r\n    };\r\n\r\n    axios.post(\"/api/updateuser\", updatedInfo)\r\n      .then((response) => {\r\n        console.log(\"사용자 정보 업데이트 성공!\");\r\n        closeModal();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"사용자 정보 업데이트 실패: \", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n  \r\n    <div className=\"modal\" >\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"새 비밀번호\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"이메일\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={(e) => setProfileImage(e.target.files[0])}\r\n      />\r\n      <button onClick={updateUser}>저장</button>\r\n      <button onClick={closeModal}>취소</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateUser;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\DCNresult.js",["174","175","176","177","178"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport './home.css';\r\nimport loading from '../common/loading.gif';\r\n\r\nfunction DCNresult(props){\r\n  const navigate = useNavigate();\r\n\r\n  const [dcn, setDcn] = useState([]);\r\n  const [SelectedSongs, setSelectedSongs] = useState([]);  \r\n  const [SelectedIds, setSelectedIds] = useState([]);  \r\n  const [selectedLyrics, setSelectedLyrics] = useState(null);\r\n  const [selectedTitle, setSelectedTitle] = useState(null);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);      \r\n\r\n\r\n  const userId = props.userId;    \r\n\r\n    const getResult = async() => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:8080/api/dcn/recommend-songs2/${userId}`);\r\n            // console.log(response.data)\r\n            setDcn(response.data);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getResult();\r\n      }, []);\r\n\r\n      const handleSongClick = (song) => {\r\n        setSelectedSongs((prevSongs) => {\r\n          const newSongs = new Set(prevSongs); // 이전 선택된 아이템 집합 복사\r\n            newSongs.add(song);\r\n          return newSongs;\r\n        });\r\n      };        \r\n\r\n      const handleLyricClick = (index) => {\r\n        setSelectedLyrics(dcn[index].lyric_Str);\r\n        setSelectedTitle(dcn[index].songName);\r\n        setIsModalVisible(true);\r\n      };      \r\n\r\n      const closeModal = () => {\r\n        setIsModalVisible(false);\r\n      };            \r\n\r\n      return (\r\n      \r\n        <div className=\"cent\" style={{ margin: \"20px\", width: \"100%\" }}>\r\n        \r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <table className=\"td800\">\r\n            <tbody>\r\n              <tr>\r\n                <td colSpan=\"4\" style={{ textAlign: \"left\" }}>\r\n                <p style={{ textAlign: \"left\" , fontSize : '18px'}} >\r\n                  DCN모델을 기반으로 추천드립니다\r\n                </p>\r\n                <p style={{fontSize : '14px'}}>\r\n                회원님의 사이트 이용 패턴을 분석하여 딥러닝을 사용해 노래를 추천드립니다.\r\n                </p>\r\n                {/* <p style={{fontSize : '14px', marginBottom : '0px'}}>\r\n                유저와 노래에 대한 특징을 임베딩하여 유저가 노래에 남긴 평점을 DCN(Deep & Cross Network)을 이용하여 학습시키고 \r\n                </p>\r\n                <p style={{fontSize : '14px'}}>\r\n                선택한 노래에 대해서 평점을 기반으로 학습한 결과를 이용해 추천합니다. \r\n                </p>                 */}\r\n                </td>\r\n              </tr>\r\n              {dcn.length > 0 ? (\r\n              dcn.map((song, index) => (\r\n                <tr key={index} style={{ fontSize: \"16px\", textAlign: \"left\" }}>\r\n                  <td className=\"td400\">\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                      <img\r\n                        onClick={() => handleSongClick(song.songName)}\r\n                        alt=\"song\"\r\n                        src={song.url}\r\n                        width=\"50\"\r\n                        height=\"50\"\r\n                      />\r\n                      <div style={{ marginLeft: \"10px\" }}>\r\n                        <span onClick={() => handleSongClick(song.songName)}>\r\n                          {song.songName}\r\n                        </span>\r\n                        <p\r\n                          onClick={() => handleSongClick(song.songName)}\r\n                          style={{ fontSize: \"10px\", textAlign: \"left\" }}\r\n                        >\r\n                          {song.artistName}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                  <div style={{ marginLeft : \"100px\", display: \"flex\", flexDirection: \"row\" }}>\r\n                    <button className = 'lyric-btn' onClick={() => handleLyricClick(index)} >\r\n                    가사보기\r\n                    </button>\r\n                  </div>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                  <img style ={{ paddingLeft : '300px' }} src = {loading} alt =\"loading\" />\r\n              </tr>\r\n            )}              \r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {isModalVisible && selectedLyrics !== null && (\r\n        <div className=\"lyric_modal\">\r\n          <div className=\"title_container\">\r\n            <h4>{selectedTitle}</h4>\r\n          </div>\r\n          <div className=\"lyric_content\" dangerouslySetInnerHTML={{ __html: selectedLyrics }} />\r\n          <button onClick={closeModal}>닫기</button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n    );\r\n  };\r\n  \r\n  export default DCNresult;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Melresult.js",["179","180","181","182","183"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport './home.css';\r\nimport loading from '../common/loading.gif';\r\n\r\nfunction Melresult(props){\r\n  const navigate = useNavigate();\r\n\r\n  const [mel, setMel] = useState([]);\r\n  const [SelectedSongs, setSelectedSongs] = useState([]);  \r\n  const [SelectedIds, setSelectedIds] = useState([]);  \r\n  const [selectedLyrics, setSelectedLyrics] = useState(null);\r\n  const [selectedTitle, setSelectedTitle] = useState(null);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);      \r\n\r\n\r\n  const userId = props.userId;    \r\n\r\n    const getResult = async() => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:8080/api/mel/recommend-songs3/${userId}`);\r\n            // console.log(response.data)\r\n            setMel(response.data);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n  \r\n\r\n    useEffect(() => {\r\n        getResult();\r\n      }, []);\r\n\r\n      const handleSongClick = (song) => {\r\n        setSelectedSongs((prevSongs) => {\r\n          const newSongs = new Set(prevSongs); // 이전 선택된 아이템 집합 복사\r\n            newSongs.add(song);\r\n          return newSongs;\r\n        });\r\n      };        \r\n\r\n      const handleLyricClick = (index) => {\r\n        setSelectedLyrics(mel[index].lyric_Str);\r\n        setSelectedTitle(mel[index].songName);\r\n        setIsModalVisible(true);\r\n      };      \r\n\r\n      const closeModal = () => {\r\n        setIsModalVisible(false);\r\n      };            \r\n\r\n      return (\r\n      \r\n        <div className=\"cent\" style={{ margin: \"20px\", width: \"100%\" }}>\r\n        \r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <table className=\"td800\">\r\n            <tbody>\r\n              <tr>\r\n                <td colSpan=\"4\" style={{ textAlign: \"left\" }}>\r\n                  <p style={{ textAlign: \"left\" , fontSize : '18px'}} >\r\n                  KNN모델을 기반으로 추천드립니다\r\n                  </p>\r\n                  <p style={{fontSize : '14px', marginBottom : '0px'}}>\r\n                  소리파형으로부터 얻은 Mel-spectrogram을 장르기반 신경망 학습을 통하여 특징을 추출,\r\n                  </p>\r\n                  <p style={{fontSize : '14px'}}>\r\n                  K-최근접이웃모델로 유사한 패턴을 가진 곡을 추천합니다. \r\n                  </p>\r\n                </td>\r\n              </tr>\r\n              {mel.length > 0 ? (\r\n              mel.map((song, index) => (\r\n                <tr key={index} style={{ fontSize: \"16px\", textAlign: \"left\" }}>\r\n                  <td className=\"td400\">\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                      <img\r\n                        onClick={() => handleSongClick(song.songName)}\r\n                        alt=\"song\"\r\n                        src={song.url}\r\n                        width=\"50\"\r\n                        height=\"50\"\r\n                      />\r\n                      <div style={{ marginLeft: \"10px\" }}>\r\n                        <span onClick={() => handleSongClick(song.songName)}>\r\n                          {song.songName}\r\n                        </span>\r\n                        <p\r\n                          onClick={() => handleSongClick(song.songName)}\r\n                          style={{ fontSize: \"10px\", textAlign: \"left\" }}\r\n                        >\r\n                          {song.artistName}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                  <div style={{ marginLeft : \"100px\", display: \"flex\", flexDirection: \"row\" }}>\r\n                    <button className = 'lyric-btn' onClick={() => handleLyricClick(index)} >\r\n                    가사보기\r\n                    </button>\r\n                  </div>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                  <img style ={{ paddingLeft : '300px' }} src = {loading} alt =\"loading\" />\r\n              </tr>\r\n            )}              \r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {isModalVisible && selectedLyrics !== null && (\r\n        <div className=\"lyric_modal\">\r\n          <div className=\"title_container\">\r\n            <h4>{selectedTitle}</h4>\r\n          </div>\r\n          <div className=\"lyric_content\" dangerouslySetInnerHTML={{ __html: selectedLyrics }} />\r\n          <button onClick={closeModal}>닫기</button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n    );\r\n  };\r\n  \r\n  export default Melresult;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Info.js",["184","185","186","187"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport {Chart, ArcElement, Tooltip, Legend} from 'chart.js';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport axios from 'axios';\r\nimport 'swiper/css';\r\nimport 'swiper/css/autoplay';\r\nimport 'swiper/css/navigation';\r\nimport 'swiper/css/pagination';\r\n\r\nChart.register(ArcElement, Tooltip, Legend);\r\n\r\nfunction Info(){\r\n\r\n  // const showurl = [\r\n  //   'https://i.scdn.co/image/ab67616d0000b273bfd46639322b597331d9ecef',\r\n  //   'https://i.scdn.co/image/ab67616d0000b2731111b7562b4b46870d27f98b',\r\n  //   'https://i.scdn.co/image/ab67616d0000b2739d3b5d695233802eafb6e012',\r\n  //   'https://i.scdn.co/image/ab67616d0000b2734ed058b71650a6ca2c04adff',\r\n  //   'https://i.scdn.co/image/ab67616d0000b2739d28fd01859073a3ae6ea209',\r\n  //   'https://i.scdn.co/image/ab67616d0000b273e50cf3bed0fade43e96daa3d',\r\n  //   'https://i.scdn.co/image/ab67616d0000b273e4915763c3c7f7a05cc93885',\r\n    \r\n  // ];\r\n\r\n  const [chartdata, setChartdata] = useState([]);\r\n\r\n  const getData = async() => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/genre/all');\r\n        console.log(response.data)\r\n        setChartdata(response.data);\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n  };  \r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const extractData = (data) => {\r\n    const genre = data.map((item) => item.genre);\r\n    const count = data.map((item) => item.count);\r\n    return { genre, count };\r\n  };\r\n\r\n  \r\n  const [chartConfig, setChartConfig] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        data: [],\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n          '#CC65FE',\r\n          '#FF4D4D',\r\n          '#FFA500',\r\n          '#00CED1',\r\n          '#9932CC',\r\n          '#3CB371',\r\n          '#8B008B',\r\n          '#FF69B4',\r\n          '#FFA07A',\r\n          '#7FFF00',\r\n          '#ADFF2F',\r\n          '#DC143C',\r\n          '#00BFFF',\r\n          '#1E90FF',\r\n          '#20B2AA',\r\n          '#F08080',\r\n          '#DDA0DD',\r\n          '#808000',\r\n          '#D2B48C',\r\n          '#4682B4',\r\n          '#FFD700',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n          '#CC65FE',\r\n          '#FF4D4D',\r\n          '#FFA500',\r\n          '#00CED1',\r\n          '#9932CC',\r\n          '#3CB371',\r\n          '#8B008B',\r\n          '#FF69B4',\r\n          '#FFA07A',\r\n          '#7FFF00',\r\n          '#ADFF2F',\r\n          '#DC143C',\r\n          '#00BFFF',\r\n          '#1E90FF',\r\n          '#20B2AA',\r\n          '#F08080',\r\n          '#DDA0DD',\r\n          '#808000',\r\n          '#D2B48C',\r\n          '#4682B4',\r\n          '#FFD700',\r\n        ],\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { genre, count } = extractData(chartdata);\r\n    setChartConfig((prevChartConfig) => ({\r\n      ...prevChartConfig,\r\n      labels: genre,\r\n      datasets: [\r\n        {\r\n          ...prevChartConfig.datasets[0],\r\n          data: count,\r\n        },\r\n      ],\r\n    }));\r\n  }, [chartdata]);\r\n\r\n\r\n\r\n  const handleSlideChange = (swiper) => {\r\n    console.log('slide change:', swiper.activeIndex);\r\n  };\r\n\r\n  const handleSwiperLoad = (swiper) => {\r\n    console.log('Swiper loaded:', swiper);\r\n  };\r\n\r\n\r\nreturn <>\r\n<div style={{ display: 'flex', justifyContent: 'center', marginTop : '40px', fontSize : '18px' }}>\r\n  <table>\r\n  <tr>\r\n  음악 추천 서비스를 제공하는 Watermelon 홈페이지 입니다.\r\n  </tr>\r\n  <tr>\r\n  저희는 4000여곡의 데이터를 가지고 회원분들이 평소에 좋아하시는\r\n  </tr>   \r\n  <tr>\r\n  노래의 가사, 사용패턴, 소리파형 등을 이용해 노래를 추천드리는 서비스를 제공하고 있습니다.\r\n  </tr>\r\n  <tr>\r\n  로그인/회원가입을 하시면 추천 결과를 받아보실 수 있습니다.\r\n  </tr>  \r\n  </table>\r\n</div>\r\n\r\n\r\n<div style={{ display: 'flex', marginLeft : 'auto', marginRight : 'auto', justifyContent: 'center', marginTop: '40px', maxWidth: '600px', maxHeight: '800px' }}>\r\n        <Doughnut style={{ display: 'flex', justifyContent: 'center' }} data={chartConfig}\r\n    options={{\r\n      plugins: {\r\n        legend: {\r\n          labels: {\r\n            color: '#fff', // Set legend label color to \r\n          },\r\n        },\r\n      },\r\n    }}        \r\n        />        \r\n</div>\r\n\r\n\r\n\r\n{/* <div style={{ display: 'flex', justifyContent: 'center', marginTop : '40px', fontSize : '18px' }}>\r\n  <Swiper\r\n      style={{ maxWidth: '800px', maxHeight: '200px' }}\r\n      // modules={[Autoplay]}\r\n      effect={\"slide\"}\r\n      autoplay={{\r\n        delay: 1000,\r\n        disableOnInteraction: false,\r\n      }}\r\n      loop={true}\r\n      spaceBetween={10}\r\n      slidesPerView={3}\r\n      slidesPerGroup={1}\r\n      onSlideChange={handleSlideChange}\r\n      onSwiper= {handleSwiperLoad} \r\n    >\r\n  {showurl.map((url, index) => (\r\n            <SwiperSlide key={index}>\r\n              <img src={url} alt={`Slide ${index + 1}`} style={{ maxWidth: '200px', maxHeight: '200px' }} />\r\n            </SwiperSlide>\r\n          ))}\r\n    </Swiper>\r\n</div> */}\r\n\r\n</>\r\n}\r\n\r\nexport default Info;","C:\\박현호\\프로젝트\\react-jwt-auth\\src\\components\\Searchresult.js",[],[],{"ruleId":"188","severity":1,"message":"189","line":2,"column":25,"nodeType":"190","messageId":"191","endLine":2,"endColumn":29},{"ruleId":"188","severity":1,"message":"192","line":2,"column":44,"nodeType":"190","messageId":"191","endLine":2,"endColumn":52},{"ruleId":"188","severity":1,"message":"193","line":15,"column":10,"nodeType":"190","messageId":"191","endLine":15,"endColumn":13},{"ruleId":"188","severity":1,"message":"194","line":37,"column":9,"nodeType":"190","messageId":"191","endLine":37,"endColumn":22},{"ruleId":"195","severity":1,"message":"196","line":59,"column":6,"nodeType":"197","endLine":59,"endColumn":8,"suggestions":"198"},{"ruleId":"188","severity":1,"message":"199","line":127,"column":11,"nodeType":"190","messageId":"191","endLine":127,"endColumn":19},{"ruleId":"188","severity":1,"message":"200","line":6,"column":8,"nodeType":"190","messageId":"191","endLine":6,"endColumn":20},{"ruleId":"188","severity":1,"message":"201","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":18},{"ruleId":"188","severity":1,"message":"202","line":15,"column":12,"nodeType":"190","messageId":"191","endLine":15,"endColumn":16},{"ruleId":"188","severity":1,"message":"203","line":15,"column":18,"nodeType":"190","messageId":"191","endLine":15,"endColumn":25},{"ruleId":"188","severity":1,"message":"204","line":21,"column":11,"nodeType":"190","messageId":"191","endLine":21,"endColumn":29},{"ruleId":"188","severity":1,"message":"205","line":11,"column":10,"nodeType":"190","messageId":"191","endLine":11,"endColumn":17},{"ruleId":"188","severity":1,"message":"192","line":2,"column":10,"nodeType":"190","messageId":"191","endLine":2,"endColumn":18},{"ruleId":"188","severity":1,"message":"206","line":47,"column":9,"nodeType":"190","messageId":"191","endLine":47,"endColumn":26},{"ruleId":"207","severity":1,"message":"208","line":38,"column":1,"nodeType":"209","endLine":38,"endColumn":34},{"ruleId":"195","severity":1,"message":"210","line":42,"column":8,"nodeType":"197","endLine":42,"endColumn":23,"suggestions":"211"},{"ruleId":"195","severity":1,"message":"210","line":46,"column":8,"nodeType":"197","endLine":46,"endColumn":21,"suggestions":"212"},{"ruleId":"207","severity":1,"message":"208","line":24,"column":1,"nodeType":"209","endLine":24,"endColumn":34},{"ruleId":"195","severity":1,"message":"210","line":38,"column":8,"nodeType":"197","endLine":38,"endColumn":23,"suggestions":"213"},{"ruleId":"188","severity":1,"message":"214","line":8,"column":11,"nodeType":"190","messageId":"191","endLine":8,"endColumn":19},{"ruleId":"188","severity":1,"message":"215","line":12,"column":12,"nodeType":"190","messageId":"191","endLine":12,"endColumn":25},{"ruleId":"188","severity":1,"message":"216","line":13,"column":12,"nodeType":"190","messageId":"191","endLine":13,"endColumn":23},{"ruleId":"195","severity":1,"message":"217","line":40,"column":10,"nodeType":"197","endLine":40,"endColumn":12,"suggestions":"218"},{"ruleId":"188","severity":1,"message":"219","line":51,"column":13,"nodeType":"190","messageId":"191","endLine":51,"endColumn":26},{"ruleId":"188","severity":1,"message":"220","line":2,"column":10,"nodeType":"190","messageId":"191","endLine":2,"endColumn":21},{"ruleId":"188","severity":1,"message":"214","line":8,"column":9,"nodeType":"190","messageId":"191","endLine":8,"endColumn":17},{"ruleId":"188","severity":1,"message":"215","line":11,"column":10,"nodeType":"190","messageId":"191","endLine":11,"endColumn":23},{"ruleId":"188","severity":1,"message":"216","line":12,"column":10,"nodeType":"190","messageId":"191","endLine":12,"endColumn":21},{"ruleId":"188","severity":1,"message":"221","line":12,"column":23,"nodeType":"190","messageId":"191","endLine":12,"endColumn":37},{"ruleId":"195","severity":1,"message":"217","line":32,"column":10,"nodeType":"197","endLine":32,"endColumn":12,"suggestions":"222"},{"ruleId":"188","severity":1,"message":"214","line":8,"column":9,"nodeType":"190","messageId":"191","endLine":8,"endColumn":17},{"ruleId":"188","severity":1,"message":"215","line":11,"column":10,"nodeType":"190","messageId":"191","endLine":11,"endColumn":23},{"ruleId":"188","severity":1,"message":"216","line":12,"column":10,"nodeType":"190","messageId":"191","endLine":12,"endColumn":21},{"ruleId":"188","severity":1,"message":"221","line":12,"column":23,"nodeType":"190","messageId":"191","endLine":12,"endColumn":37},{"ruleId":"195","severity":1,"message":"217","line":33,"column":10,"nodeType":"197","endLine":33,"endColumn":12,"suggestions":"223"},{"ruleId":"188","severity":1,"message":"224","line":5,"column":10,"nodeType":"190","messageId":"191","endLine":5,"endColumn":16},{"ruleId":"188","severity":1,"message":"225","line":5,"column":18,"nodeType":"190","messageId":"191","endLine":5,"endColumn":29},{"ruleId":"188","severity":1,"message":"226","line":127,"column":9,"nodeType":"190","messageId":"191","endLine":127,"endColumn":26},{"ruleId":"188","severity":1,"message":"227","line":131,"column":9,"nodeType":"190","messageId":"191","endLine":131,"endColumn":25},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'Nav' is defined but never used.","'updateShowTop' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logOut'. Either include it or remove the dependency array.","ArrayExpression",["228"],"'response' is assigned a value but never used.","'Searchresult' is defined but never used.","'Recommend1' is defined but never used.","'reco' is assigned a value but never used.","'setReco' is assigned a value but never used.","'selectedSongsArray' is assigned a value but never used.","'content' is assigned a value but never used.","'handleUpdateClick' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["229"],["230"],["231"],"'navigate' is assigned a value but never used.","'SelectedSongs' is assigned a value but never used.","'SelectedIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getResult'. Either include it or remove the dependency array.",["232"],"'handleIdClick' is assigned a value but never used.","'useNavigate' is defined but never used.","'setSelectedIds' is assigned a value but never used.",["233"],["234"],"'Swiper' is defined but never used.","'SwiperSlide' is defined but never used.","'handleSlideChange' is assigned a value but never used.","'handleSwiperLoad' is assigned a value but never used.",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"243","fix":"245"},{"desc":"243","fix":"246"},"Update the dependencies array to be: [logOut]",{"range":"247","text":"248"},"Update the dependencies array to be: [props, selectedSongs]",{"range":"249","text":"250"},"Update the dependencies array to be: [props, selectedIds]",{"range":"251","text":"252"},"Update the dependencies array to be: [props, selectedItems]",{"range":"253","text":"254"},"Update the dependencies array to be: [getResult]",{"range":"255","text":"256"},{"range":"257","text":"256"},{"range":"258","text":"256"},[1940,1942],"[logOut]",[1324,1339],"[props, selectedSongs]",[1425,1438],"[props, selectedIds]",[1285,1300],"[props, selectedItems]",[1325,1327],"[getResult]",[1019,1021],[1023,1025]]