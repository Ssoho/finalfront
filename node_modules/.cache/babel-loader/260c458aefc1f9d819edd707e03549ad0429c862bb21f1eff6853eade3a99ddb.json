{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\uBC15\\uD604\\uD638\\\\\\uD504\\uB85C\\uC81D\\uD2B8\\\\react-jwt-auth\\\\src\\\\components\\\\Player.js\",\n  _s = $RefreshSig$();\nimport ReactPlayer from 'react-player';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Player = () => {\n  _s();\n  const [audioUrl, setAudioUrl] = useState('https://www.youtube.com/watch?v=nM0xDI5R50E');\n  useEffect(() => {\n    // Simulating API call to fetch audio URL from the database\n    // Replace 'YOUR_API_ENDPOINT' with the actual endpoint to fetch the URL from the database\n    const fetchAudioUrlFromDatabase = async () => {\n      try {\n        const response = await axios.get('YOUR_API_ENDPOINT');\n        // Assuming the response contains the audio URL data in a property called 'url_data'\n        const url_data = response.data.url_data;\n        setAudioUrl(url_data);\n      } catch (error) {\n        console.error('Error fetching audio URL:', error);\n      }\n    };\n    fetchAudioUrlFromDatabase();\n  }, []); // The empty dependency array ensures this effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n      url: audioUrl,\n      controls: true,\n      width: \"100%\",\n      height: \"60px\",\n      config: {\n        youtube: {\n          playerVars: {\n            modestbranding: 1,\n            // YouTube 로고 감추기\n            controls: 1,\n            // 재생 컨트롤 표시\n            showinfo: 0,\n            // 동영상 제목과 업로더 정보 감추기\n            fs: 0,\n            // 전체 화면 버튼 비활성화\n            disablekb: 1,\n            // 키보드 제어 비활성화\n            loop: 0,\n            // 동영상 반복 재생 비활성화\n            rel: 0,\n            // 관련 동영상 표시 비활성화\n            autoplay: 1 // 자동 재생 활성화\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Player, \"TXXWBsvIvISma26IutyzXA4tTUU=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["ReactPlayer","React","useState","useEffect","axios","jsxDEV","_jsxDEV","Player","_s","audioUrl","setAudioUrl","fetchAudioUrlFromDatabase","response","get","url_data","data","error","console","className","children","url","controls","width","height","config","youtube","playerVars","modestbranding","showinfo","fs","disablekb","loop","rel","autoplay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/박현호/프로젝트/react-jwt-auth/src/components/Player.js"],"sourcesContent":["import ReactPlayer from 'react-player';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Player = () => {\r\n  const [audioUrl, setAudioUrl] = useState('https://www.youtube.com/watch?v=nM0xDI5R50E');\r\n\r\n  useEffect(() => {\r\n    // Simulating API call to fetch audio URL from the database\r\n    // Replace 'YOUR_API_ENDPOINT' with the actual endpoint to fetch the URL from the database\r\n    const fetchAudioUrlFromDatabase = async () => {\r\n      try {\r\n        const response = await axios.get('YOUR_API_ENDPOINT');\r\n        // Assuming the response contains the audio URL data in a property called 'url_data'\r\n        const url_data = response.data.url_data;\r\n        setAudioUrl(url_data);\r\n      } catch (error) {\r\n        console.error('Error fetching audio URL:', error);\r\n      }\r\n    };\r\n\r\n    fetchAudioUrlFromDatabase();\r\n  }, []); // The empty dependency array ensures this effect runs only once on component mount\r\n\r\n  return (\r\n    <div className=\"audio-player\">\r\n      <ReactPlayer\r\n        url={audioUrl}\r\n        controls\r\n        width=\"100%\"\r\n        height=\"60px\"\r\n        config={{\r\n            youtube: {\r\n              playerVars: {\r\n                modestbranding: 1, // YouTube 로고 감추기\r\n                controls: 1, // 재생 컨트롤 표시\r\n                showinfo: 0, // 동영상 제목과 업로더 정보 감추기\r\n                fs: 0, // 전체 화면 버튼 비활성화\r\n                disablekb: 1, // 키보드 제어 비활성화\r\n                loop: 0, // 동영상 반복 재생 비활성화\r\n                rel: 0, // 관련 동영상 표시 비활성화\r\n                autoplay: 1, // 자동 재생 활성화\r\n                \r\n              },\r\n            },\r\n          }}        \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,cAAc;AACtC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,6CAA6C,CAAC;EAEvFC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMQ,yBAAyB,GAAG,MAAAA,CAAA,KAAY;MAC5C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,mBAAmB,CAAC;QACrD;QACA,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACD,QAAQ;QACvCJ,WAAW,CAACI,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDL,yBAAyB,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKY,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3Bb,OAAA,CAACN,WAAW;MACVoB,GAAG,EAAEX,QAAS;MACdY,QAAQ;MACRC,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC,MAAM;MACbC,MAAM,EAAE;QACJC,OAAO,EAAE;UACPC,UAAU,EAAE;YACVC,cAAc,EAAE,CAAC;YAAE;YACnBN,QAAQ,EAAE,CAAC;YAAE;YACbO,QAAQ,EAAE,CAAC;YAAE;YACbC,EAAE,EAAE,CAAC;YAAE;YACPC,SAAS,EAAE,CAAC;YAAE;YACdC,IAAI,EAAE,CAAC;YAAE;YACTC,GAAG,EAAE,CAAC;YAAE;YACRC,QAAQ,EAAE,CAAC,CAAE;UAEf;QACF;MACF;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA7CID,MAAM;AAAA+B,EAAA,GAAN/B,MAAM;AA+CZ,eAAeA,MAAM;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}